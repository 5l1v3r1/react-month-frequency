{"version":3,"file":"index.mjs","sources":["../src/styles.js","../src/consts.js","../src/index.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  width: ${props => props.width}px;\n  display: flex;\n  flex-direction: row;\n  background-color: ${props => props.backgroundColor};\n  border-radius: ${props => props.radius}px;\n  padding: 15px;\n  box-sizing: border-box;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-content: flex-start;\n`;\n\nexport const MonthContainer = styled.div`\n  height: ${props => props.height}px;\n  width: ${props => props.width}px;\n  padding: 5px;\n`;\n\nexport const MonthLabel = styled.div`\n  color: ${props => props.color};\n  font-size: ${props => props.fontSize}px;\n  margin-bottom: 2px;\n`;\n\nexport const MonthInner = styled.div`\n  height: 65px;\n  width: 85px;\n  display: flex;\n  flex-wrap: wrap;\n  box-sizing: border-box;\n  align-content: flex-start;\n`;\n\nexport const MonthSquare = styled.div`\n  height: ${props => props.height}px;\n  width: ${props => props.width}px;\n  margin: 2px;\n  opacity: ${props => props.opacity};\n  background-color: ${props => props.color};\n  border-radius: 1px;\n`;\n","export const monthsLong = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\"\n];\n\nexport const monthDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nexport const defaultConfig = {\n  style: {\n    container: {\n      width: 470,\n      backgroundColor: \"#161f29\",\n      radius: 15\n    },\n    monthBlockSize: {\n      height: 80,\n      width: 95\n    },\n    daySquare: {\n      height: 8,\n      width: 8,\n      color: \"white\"\n    },\n    monthTitle: {\n      color: \"white\",\n      fontSize: 10\n    }\n  },\n  colorThresholds: [\n    {\n      from: 0,\n      to: 1,\n      opacity: 0.1\n    },\n    {\n      from: 1,\n      to: 3,\n      opacity: 0.2\n    },\n    {\n      from: 3,\n      to: 5,\n      opacity: 0.4\n    },\n    {\n      from: 5,\n      to: 7,\n      opacity: 0.6\n    },\n    {\n      from: 7,\n      to: 9,\n      opacity: 0.8\n    },\n    {\n      from: 9,\n      opacity: 1\n    }\n  ]\n};\n","import React, { Component } from \"react\";\n\nimport {\n  Container,\n  MonthContainer,\n  MonthInner,\n  MonthLabel,\n  MonthSquare\n} from \"./styles\";\n\nimport { monthDays, monthsLong, defaultConfig } from \"./consts\";\n\nexport default class MonthFreq extends Component {\n  mergedConfig = () => {\n    return Object.assign({}, defaultConfig, this.props.config);\n  };\n\n  getOpacity = amount => {\n    const { colorThresholds } = this.mergedConfig();\n    let item = colorThresholds.filter(item => {\n      const { from, to } = item;\n      return amount > from && amount <= to;\n    })[0];\n    if (item) {\n      return item.opacity;\n    } else {\n      return 0.1;\n    }\n  };\n\n  renderEmptyBlocks = (month, config) => {\n    let rend = [];\n    for (let i = 0; i < monthDays[month]; i++) {\n      rend.push(\n        <MonthSquare\n          {...config.style.daySquare}\n          key={i}\n          opacity={this.getOpacity(0)}\n        />\n      );\n    }\n    return rend;\n  };\n\n  validate = () => {\n    if (!(this.props.data instanceof Array)) {\n      throw new Error(\"Data provided must be an array\");\n    }\n    this.props.data.forEach(item => {\n      if (!(item.date && item.count)) {\n        throw new Error(\n          \"Ensure data is formatted correctly [{date: String, count: Number}]\"\n        );\n      }\n      if (typeof item.date !== \"string\") {\n        throw new Error(\"Dates must be provided in string format\");\n      }\n      if (typeof item.count !== \"number\") {\n        throw new Error(\"Counts must be provided in number format\");\n      }\n    });\n  };\n\n  formatData = () => {\n    this.validate();\n    const { data } = this.props;\n    let monthData = {};\n    data.forEach(item => {\n      const [_, month, day] = item.date.split(\"/\");\n      let singleMonth = parseInt(month, 10);\n      if (monthData[singleMonth]) {\n        monthData[singleMonth][day - 1] = item.count;\n      } else {\n        monthData[singleMonth] = [];\n        monthData[singleMonth][day - 1] = item.count;\n      }\n    });\n    Object.keys(monthData).forEach(key => {\n      for (let i = 0; i < monthDays[key - 1]; i++) {\n        if (!monthData[key][i]) {\n          monthData[key][i] = 0;\n        }\n      }\n    });\n    return monthData;\n  };\n\n  renderData = config => {\n    let formattedData = this.formatData();\n    return monthsLong.map((monthName, index) => {\n      if (!formattedData[index]) {\n        return (\n          <MonthContainer {...config.style.monthBlockSize} key={index}>\n            <MonthLabel {...config.style.monthTitle}> {monthName}</MonthLabel>\n            <MonthInner>{this.renderEmptyBlocks(index, config)}</MonthInner>\n          </MonthContainer>\n        );\n      } else {\n        return (\n          <MonthContainer key={index}>\n            <MonthLabel {...config.style.monthTitle}> {monthName}</MonthLabel>\n            <MonthInner>\n              {formattedData[index].map((item, innerIndex) => {\n                return (\n                  <MonthSquare\n                    {...config.style.daySquare}\n                    key={innerIndex}\n                    opacity={this.getOpacity(item)}\n                  />\n                );\n              })}\n            </MonthInner>\n          </MonthContainer>\n        );\n      }\n    });\n  };\n\n  render() {\n    let mergedConfig = this.mergedConfig();\n    return (\n      <Container {...mergedConfig.style.container}>\n        {this.renderData(mergedConfig)}\n      </Container>\n    );\n  }\n}\n"],"names":["Container","styled","div","props","width","backgroundColor","radius","MonthContainer","height","MonthLabel","color","fontSize","MonthInner","MonthSquare","opacity","monthsLong","monthDays","defaultConfig","style","container","monthBlockSize","daySquare","monthTitle","colorThresholds","from","to","mergedConfig","Object","assign","this","config","getOpacity","amount","item","filter","renderEmptyBlocks","month","rend","i","push","React","key","validate","data","Array","Error","forEach","date","count","formatData","monthData","split","singleMonth","parseInt","day","keys","let","renderData","formattedData","map","monthName","index","innerIndex","render","Component"],"mappings":"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"}